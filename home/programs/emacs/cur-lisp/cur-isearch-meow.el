(require 'isearch)
(require 'hydra)

(defgroup isearch-meow nil
  "Setting for making isearch work better with meow."
  :group 'isearch)

(defun isearch-meow-wrapper (&optional arg)
  (interactive (list 1))
  (progn
    (when (region-active-p)
      (call-interactively #'meow-cancel-selection))
    (cond ((< arg 1)
           (call-interactively #'isearch-backward))
          (t
           (call-interactively #'isearch-forward)))))

(defun isearch-meow-exit-next-line()
  (interactive)
  (progn
    (call-interactively #'isearch-exit)
    (call-interactively #'meow-next)))

(defun isearch-meow-exit-prev-line()
  (interactive)
  (progn
    (call-interactively #'isearch-exit)
    (call-interactively #'meow-prev)))

(defun isearch-meow-exit-left()
  (interactive)
  (progn
    (call-interactively #'isearch-exit)
    (call-interactively #'meow-left)))

(defun isearch-meow-exit-right()
  (interactive)
  (progn
    (call-interactively #'isearch-exit)
    (call-interactively #'meow-right)))

(defun isearch-meow-exit-back-to-indentation()
  (interactive)
  (progn
    (call-interactively #'isearch-exit)
    (call-interactively #'meow-join)))

(defun isearch-meow-exit-end-of-line()
  (interactive)
  (progn
    (call-interactively #'isearch-exit)
    (call-interactively #'meow-line)))

(defun isearch-meow-exit-next-word()
  (interactive)
  (progn
    (call-interactively #'isearch-exit)
    (call-interactively #'meow-next-word)))

(defun isearch-meow-exit-back-word()
  (interactive)
  (progn
    (call-interactively #'isearch-exit)
    (call-interactively #'meow-back-word)))

(defun isearch-meow-insert ()
  (interactive)
  (progn
    (call-interactively #'isearch-exit)
    (call-interactively #'meow-insert)))

(defun isearch-meow-append ()
  (interactive)
  (progn
    (call-interactively #'isearch-exit)
    (call-interactively #'meow-append)))

(defhydra isearch-meow-hydra (:hint nil)
  ""
  ("`"   ignore)
  ("~"   ignore)
  ("1"   ignore)
  ("!"   ignore)
  ("2"   ignore)
  ("@"   ignore)
  ("3"   ignore)
  ("#"   ignore)
  ("4"   ignore)
  ("$"   ignore)
  ("5"   ignore)
  ("%"   ignore)
  ("6"   ignore)
  ("^"   ignore)
  ("7"   ignore)
  ("&"   ignore)
  ("8"   ignore)
  ("*"   ignore)
  ("9"   ignore)
  ("("   ignore)
  ("0"   ignore)
  (")"   ignore)
  ("a"   isearch-meow-append)
  ("A"   ignore)
  ("b"   isearch-meow-exit-back-word :exit t)
  ("B"   ignore)
  ("c"   isearch-query-replace-regexp)
  ("C"   ignore)
  ("d"   ignore)
  ("D"   ignore)
  ("e"   isearch-meow-exit-next-word :exit t)
  ("E"   ignore)
  ("f"   ignore)
  ("F"   ignore)
  ("g"   ignore)
  ("G"   ignore)
  ("l"   isearch-meow-exit-left)
  ("H"   ignore)
  ("i"   isearch-meow-insert)
  ("I"   ignore)
  ("j"   isearch-meow-exit-next-line :exit t)
  ("J"   ignore)
  ("k"   isearch-meow-exit-prev-line :exit t)
  ("K"   ignore)
  ("l"   isearch-meow-exit-right)
  ("L"   ignore)
  ("m"   isearch-meow-exit-back-to-indentation :exit t)
  ("M"   ignore)
  ("n"   isearch-repeat-forward)
  ("N"   ignore)
  ("o"   isearch-occur)
  ("O"   ignore)
  ("p"   isearch-repeat-backward)
  ("P"   ignore)
  ("q"   ignore)
  ("Q"   ignore)
  ("r"   isearch-query-replace-regexp)
  ("R"   ignore)
  ("s"   ignore)
  ("S"   ignore)
  ("t"   ignore)
  ("T"   ignore)
  ("u"   ignore)
  ("U"   ignore)
  ("v"   ignore)
  ("V"   ignore)
  ("w"   ignore)
  ("W"   ignore)
  ("x"   isearch-meow-exit-end-of-line :exit t)
  ("X"   ignore)
  ("y"   ignore)
  ("Y"   ignore)
  ("z"   ignore)
  ("Z"   ignore)
  ("-"   ignore)
  ("_"   ignore)
  ("="   ignore)
  ("+"   ignore)
  ("["   ignore)
  ("{"   ignore)
  ("]"   ignore)
  ("}"   ignore)
  ("\\"  ignore)
  ("|"   ignore)
  (";"   ignore)
  (":"   ignore)
  ("'"   ignore)
  ("\""  ignore)
  (","   ignore)
  ("<"   ignore)
  ("."   ignore)
  (">"   ignore)
  ("/"   nil :exit t)
  ("?"   ignore)
  ("RET" isearch-exit :exit t)
  ("<return>" isearch-exit :exit t)
  ("ESC" isearch-exit :exit t)
  ("<escape>" isearch-exit :exit t)
  ("SPC" ignore))

(define-key isearch-mode-map (kbd "RET") 'isearch-meow-hydra/body)
(define-key isearch-mode-map (kbd "<return>") 'isearch-meow-hydra/body)

(provide 'cur-isearch-meow)
